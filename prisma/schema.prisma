generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                  String    @id @default(cuid())
  expires_at          DateTime?
  user_id             String
  type                String?
  provider            String?
  provider_account_id String?
  refresh_token       String?
  access_token        String?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
  access_secret       String?
  api_key             String?
  api_secret          String?
  user                User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
  @@map("accounts")
}

model User {
  id                        String                  @id @default(cuid())
  created_at                DateTime                @default(now())
  updated_at                DateTime                @default(now())
  deleted_at                DateTime?
  status                    Int?                    @default(1) @db.SmallInt
  approved_at               DateTime?
  availability              String?
  username                  String?                 @unique
  first_name                String?                 @db.VarChar(255)
  last_name                 String?                 @db.VarChar(255)
  password                  String?                 @db.VarChar(255)
  domain                    String?                 @unique
  avatar                    String?
  email                     String?                 @unique
  name                      String?                 @db.VarChar(300)
  phone_number              String?
  location                  String?
  position                  String?
  experience_year           Int?
  portfolio_url             String?
  skills                    String?
  cover_letter              String?
  agreed_terms              Boolean                 @default(false)
  country                   String?
  state                     String?
  city                      String?
  address                   String?
  zip_code                  String?
  gender                    String?
  date_of_birth             DateTime?               @db.Date
  billing_id                String?
  type                      String?                 @default("user")
  email_verified_at         DateTime?
  is_two_factor_enabled     Int?                    @default(0)
  two_factor_secret         String?
  creator_conversations     Conversation[]          @relation("creator")
  participant_conversations Conversation[]          @relation("participant")
  receiver_messages         Message[]               @relation("receiver")
  sender_messages           Message[]               @relation("sender")
  accounts                  Account[]
  email_history_recipients  EmailHistoryRecipient[]
  receiver_notifications    Notification[]          @relation("receiver")
  sender_notifications      Notification[]          @relation("sender")
  orders                    Order[]
  payment_transactions      PaymentTransaction[]
  ResellerApplication       ResellerApplication[]
  Reseller                  Reseller[]
  role_users                RoleUser[]
  roles                     Role[]
  services                  Service[]
  subscriptions             Subscription[]
  TaskAssign                TaskAssign[]
  ucodes                    Ucode[]
  user_payment_methods      UserPaymentMethod[]
  user_settings             UserSetting[]

  @@map("users")
}

model Ucode {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  status     Int?      @default(1) @db.SmallInt
  user_id    String?
  token      String?
  email      String?
  expired_at DateTime?
  user       User?     @relation(fields: [user_id], references: [id])

  @@map("ucodes")
}

model Role {
  id               String           @id @default(cuid())
  created_at       DateTime         @default(now())
  updated_at       DateTime         @default(now())
  deleted_at       DateTime?
  status           Int?             @default(1) @db.SmallInt
  title            String?          @default("user")
  name             String?          @default("user")
  user_id          String?
  permission_roles PermissionRole[]
  role_users       RoleUser[]
  user             User?            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  TaskAssign       TaskAssign[]
  permissions      Permission[]     @relation("PermissionToRole")

  @@map("roles")
}

model Permission {
  id               String           @id @default(cuid())
  created_at       DateTime         @default(now())
  updated_at       DateTime         @default(now())
  deleted_at       DateTime?
  status           Int?             @default(1) @db.SmallInt
  title            String?
  action           String?
  subject          String?
  conditions       String?
  fields           String?
  permission_roles PermissionRole[]
  roles            Role[]           @relation("PermissionToRole")

  @@map("permissions")
}

model PermissionRole {
  created_at    DateTime   @default(now())
  updated_at    DateTime   @default(now())
  permission_id String
  role_id       String
  permission    Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade)
  role          Role       @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@id([permission_id, role_id])
  @@map("permission_roles")
}

model RoleUser {
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  role_id    String
  user_id    String
  role       Role     @relation(fields: [role_id], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([role_id, user_id])
  @@map("role_users")
}

model NotificationEvent {
  id            String         @id @default(cuid())
  created_at    DateTime       @default(now())
  updated_at    DateTime       @default(now())
  deleted_at    DateTime?
  status        Int?           @default(1) @db.SmallInt
  type          String?
  text          String?
  notifications Notification[]

  @@map("notification_events")
}

model Notification {
  id                    String             @id @default(cuid())
  created_at            DateTime           @default(now())
  updated_at            DateTime           @default(now())
  deleted_at            DateTime?
  status                Int?               @default(1) @db.SmallInt
  sender_id             String?
  receiver_id           String?
  notification_event_id String?
  entity_id             String?
  read_at               DateTime?
  notification_event    NotificationEvent? @relation(fields: [notification_event_id], references: [id])
  receiver              User?              @relation("receiver", fields: [receiver_id], references: [id])
  sender                User?              @relation("sender", fields: [sender_id], references: [id])

  @@map("notifications")
}

model UserPaymentMethod {
  id                String    @id @default(cuid())
  created_at        DateTime  @default(now())
  updated_at        DateTime  @default(now())
  deleted_at        DateTime?
  user_id           String?
  payment_method_id String?
  checkout_id       String?
  user              User?     @relation(fields: [user_id], references: [id])

  @@map("user_payment_methods")
}

model PaymentTransaction {
  id               String        @id @default(cuid())
  created_at       DateTime      @default(now())
  updated_at       DateTime      @default(now())
  deleted_at       DateTime?
  status           String?       @default("pending")
  user_id          String?
  subscription_id  String?
  type             String?       @default("order")
  withdraw_via     String?       @default("wallet")
  provider         String?
  reference_number String?
  raw_status       String?
  amount           Decimal?
  currency         String?
  paid_amount      Decimal?
  paid_currency    String?
  subscription     Subscription? @relation(fields: [subscription_id], references: [id])
  user             User?         @relation(fields: [user_id], references: [id])

  @@map("payment_transactions")
}

model Conversation {
  id             String    @id @default(cuid())
  creator_id     String
  participant_id String
  created_at     DateTime  @default(now())
  updated_at     DateTime  @default(now())
  creator        User      @relation("creator", fields: [creator_id], references: [id])
  participant    User      @relation("participant", fields: [participant_id], references: [id])
  messages       Message[]
}

model Message {
  id                  String                @id @default(cuid())
  sender_id           String
  receiver_id         String
  conversation_id     String
  message             String
  status              MessageStatus         @default(PENDING)
  created_at          DateTime              @default(now())
  updated_at          DateTime              @default(now())
  conversation        Conversation          @relation(fields: [conversation_id], references: [id])
  receiver            User                  @relation("receiver", fields: [receiver_id], references: [id])
  sender              User                  @relation("sender", fields: [sender_id], references: [id])
  AttachmentToMessage AttachmentToMessage[]
}

model Attachment {
  id                  String                @id @default(cuid())
  created_at          DateTime              @default(now())
  updated_at          DateTime              @default(now())
  deleted_at          DateTime?
  name                String?
  type                String?
  size                Int?
  file                String?
  file_alt            String?
  AttachmentToMessage AttachmentToMessage[]

  @@map("attachments")
}

model Faq {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt
  sort_order Int?      @default(0)
  question   String?
  answer     String?

  @@map("faqs")
}

model Contact {
  id           String    @id @default(cuid())
  created_at   DateTime  @default(now())
  updated_at   DateTime  @default(now())
  deleted_at   DateTime?
  first_name   String?
  last_name    String?
  email        String?
  phone_number String?
  message      String?

  @@map("contacts")
}

model SocialMedia {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt
  sort_order Int?      @default(0)
  name       String?
  url        String?
  icon       String?

  @@map("social_medias")
}

model WebsiteInfo {
  id                  String    @id @default(cuid())
  created_at          DateTime  @default(now())
  updated_at          DateTime  @default(now())
  deleted_at          DateTime?
  site_name           String?
  site_description    String?
  time_zone           String
  phone_number        String?
  email               String?
  address             String?
  logo                String?
  favicon             String?
  copyright           String?
  cancellation_policy String?

  @@map("website_infos")
}

model Setting {
  id            String        @id @default(cuid())
  created_at    DateTime      @default(now())
  updated_at    DateTime      @default(now())
  deleted_at    DateTime?
  category      String?
  label         String?
  description   String?
  key           String?       @unique
  default_value String?
  user_settings UserSetting[]

  @@map("settings")
}

model UserSetting {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  user_id    String?
  setting_id String?
  value      String?
  setting    Setting?  @relation(fields: [setting_id], references: [id])
  user       User?     @relation(fields: [user_id], references: [id])

  @@map("user_settings")
}

model Category {
  id                 String            @id @default(cuid())
  created_at         DateTime          @default(now())
  updated_at         DateTime          @default(now())
  deleted_at         DateTime?
  status             Int?              @default(1) @db.SmallInt
  name               String?
  slug               String?           @unique
  service_categories ServiceCategory[]
  services           Service[]

  @@map("categories")
}

model ServiceCategory {
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())
  service_id  String
  category_id String
  category    Category @relation(fields: [category_id], references: [id])
  service     Service  @relation(fields: [service_id], references: [id])

  @@id([service_id, category_id])
  @@map("service_categories")
}

model Service {
  id                 String            @id @default(cuid())
  created_at         DateTime          @default(now())
  updated_at         DateTime          @default(now())
  deleted_at         DateTime?
  status             Int?              @default(1) @db.SmallInt
  name               String?
  description        String?
  user_id            String?
  category_id        String?
  addons             Addon[]
  service_categories ServiceCategory[]
  service_features   ServiceFeature[]
  service_tiers      ServiceTier[]
  category           Category?         @relation(fields: [category_id], references: [id])
  user               User?             @relation(fields: [user_id], references: [id])
  subscriptions      Subscription[]

  @@map("services")
}

model Feature {
  id               String           @id @default(cuid())
  created_at       DateTime         @default(now())
  updated_at       DateTime         @default(now())
  deleted_at       DateTime?
  status           Int?             @default(1) @db.SmallInt
  name             String?
  service_features ServiceFeature[]

  @@map("features")
}

model ServiceFeature {
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  service_id String
  feature_id String
  feature    Feature  @relation(fields: [feature_id], references: [id])
  service    Service  @relation(fields: [service_id], references: [id])

  @@id([service_id, feature_id])
  @@map("service_features")
}

model ServiceTier {
  id            String         @id @default(cuid())
  created_at    DateTime       @default(now())
  updated_at    DateTime       @default(now())
  deleted_at    DateTime?
  status        Int?           @default(1) @db.SmallInt
  name          String?
  service_id    String
  price         Float?
  max_post      Int?
  orders        Order[]
  service       Service        @relation(fields: [service_id], references: [id], onDelete: Cascade)
  subscriptions Subscription[]

  @@map("service_tiers")
}

model Addon {
  id                  String              @id @default(cuid())
  created_at          DateTime            @default(now())
  updated_at          DateTime            @default(now())
  deleted_at          DateTime?
  status              Int?                @default(1) @db.SmallInt
  name                String?
  description         String?
  price               Float?
  max_count           Int?
  service_id          String
  service             Service             @relation(fields: [service_id], references: [id], onDelete: Cascade)
  subscription_addons SubscriptionAddon[]

  @@map("addons")
}

model Channel {
  id                    String                @id @default(cuid())
  created_at            DateTime              @default(now())
  updated_at            DateTime              @default(now())
  deleted_at            DateTime?
  status                Int?                  @default(1) @db.SmallInt
  name                  String?               @unique
  post_channels         PostChannel[]
  subscription_channels SubscriptionChannel[]

  @@map("channels")
}

model Subscription {
  id                    String                @id @default(cuid())
  created_at            DateTime              @default(now())
  updated_at            DateTime              @default(now())
  status                SubscriptionStatus    @default(active)
  service_tier_id       String
  service_id            String
  start_at              DateTime
  end_at                DateTime
  user_id               String?
  posts_used            Int?                  @default(0)
  orders                Order[]
  payment_transactions  PaymentTransaction[]
  subscription_addons   SubscriptionAddon[]
  subscription_channels SubscriptionChannel[]
  service               Service               @relation(fields: [service_id], references: [id], onDelete: Cascade)
  service_tier          ServiceTier           @relation(fields: [service_tier_id], references: [id], onDelete: Cascade)
  user                  User?                 @relation(fields: [user_id], references: [id])

  @@map("subscriptions")
}

model SubscriptionAddon {
  id              String       @id @default(cuid())
  created_at      DateTime     @default(now())
  updated_at      DateTime     @default(now())
  subscription_id String
  addon_id        String
  quantity        Int          @default(1)
  used_count      Int          @default(0)
  addon           Addon        @relation(fields: [addon_id], references: [id], onDelete: Cascade)
  subscription    Subscription @relation(fields: [subscription_id], references: [id], onDelete: Cascade)

  @@map("subscription_addons")
}

model SubscriptionChannel {
  id              String       @id @default(cuid())
  created_at      DateTime     @default(now())
  updated_at      DateTime     @default(now())
  subscription_id String
  channel_id      String
  is_free         Int?         @default(1)
  price           Float?
  channel         Channel      @relation(fields: [channel_id], references: [id], onDelete: Cascade)
  subscription    Subscription @relation(fields: [subscription_id], references: [id], onDelete: Cascade)

  @@map("subscription_channel")
}

model Post {
  id                String            @id @default(cuid())
  created_at        DateTime          @default(now())
  updated_at        DateTime          @default(now())
  deleted_at        DateTime?
  status            Int?              @default(0) @db.SmallInt
  schedule_at       DateTime?
  content           String?
  hashtags          String[]
  feedback          String?
  task_id           String?
  post_channels     PostChannel[]
  post_files        PostFile[]
  post_performances PostPerformance[]
  task              TaskAssign?       @relation(fields: [task_id], references: [id])

  @@map("posts")
}

model PostChannel {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt
  post_id    String
  channel_id String
  channel    Channel   @relation(fields: [channel_id], references: [id], onDelete: Cascade)
  post       Post      @relation(fields: [post_id], references: [id], onDelete: Cascade)

  @@map("post_channels")
}

model PostFile {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt
  sort_order Int?      @default(0)
  post_id    String?
  name       String?
  type       String?
  size       Int?
  file_path  String?
  file_alt   String?
  post       Post?     @relation(fields: [post_id], references: [id], onDelete: Cascade)

  @@map("post_files")
}

model Blog {
  id                   String             @id @default(cuid())
  created_at           DateTime           @default(now())
  updated_at           DateTime           @default(now())
  deleted_at           DateTime?
  status               Boolean?           @default(false)
  title                String?
  hashtags             String[]
  blog_blog_categories BlogBlogCategory[]
  blog_contents        BlogContent[]

  @@map("blogs")
}

model BlogContent {
  id           String     @id @default(cuid())
  created_at   DateTime   @default(now())
  updated_at   DateTime   @default(now())
  deleted_at   DateTime?
  status       Int?       @default(1) @db.SmallInt
  blog_id      String?
  content_type String?
  content      String?
  blog         Blog?      @relation(fields: [blog_id], references: [id], onDelete: Cascade)
  blog_files   BlogFile[]

  @@map("blog_contents")
}

model BlogCategory {
  id                   String             @id @default(cuid())
  created_at           DateTime           @default(now())
  updated_at           DateTime           @default(now())
  deleted_at           DateTime?
  status               Int?               @default(1) @db.SmallInt
  name                 String?
  slug                 String?            @unique
  blog_blog_categories BlogBlogCategory[]

  @@map("blog_categories")
}

model BlogBlogCategory {
  created_at       DateTime     @default(now())
  updated_at       DateTime     @default(now())
  blog_id          String
  blog_category_id String
  blog_category    BlogCategory @relation(fields: [blog_category_id], references: [id])
  blog             Blog         @relation(fields: [blog_id], references: [id])

  @@id([blog_id, blog_category_id])
  @@map("blog_blog_categories")
}

model BlogFile {
  id              String       @id @default(cuid())
  created_at      DateTime     @default(now())
  updated_at      DateTime     @default(now())
  deleted_at      DateTime?
  status          Int?         @default(1) @db.SmallInt
  sort_order      Int?         @default(0)
  blog_content_id String?
  name            String?
  type            String?
  size            Int?
  file_path       String?
  file_alt        String?
  blog_content    BlogContent? @relation(fields: [blog_content_id], references: [id], onDelete: Cascade)

  @@map("blog_files")
}

model WithdrawalSettings {
  id                          String    @id @default(cuid())
  created_at                  DateTime  @default(now())
  updated_at                  DateTime  @default(now())
  deleted_at                  DateTime?
  status                      Int?      @default(1) @db.SmallInt
  minimum_withdrawal_amount   Float
  withdrawal_processing_fee   Float
  withdrawal_processing_time  String
  is_flat_commission          Boolean
  flat_commission_value       Float?
  percentage_commission_value Float?
  payment_methods             String[]

  @@map("withdrawal_settings")
}

model SecuritySettings {
  id                    String    @id @default("1")
  created_at            DateTime  @default(now())
  updated_at            DateTime  @default(now())
  deleted_at            DateTime?
  status                Int?      @default(1) @db.SmallInt
  data_export_backup    Int
  session_timeout       Int
  failed_login_attempts Int
  password_expiry       Int

  @@map("security_settings")
}

model ChatLog {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  message    String
  response   String

  @@map("chat_log")
}

model EmailHistory {
  id                       String                  @id @default(cuid())
  created_at               DateTime                @default(now())
  updated_at               DateTime                @default(now())
  deleted_at               DateTime?
  status                   Int?                    @default(1) @db.SmallInt
  sort_order               Int?                    @default(0)
  type                     String?
  subject                  String?
  body                     String?
  email_history_recipients EmailHistoryRecipient[]

  @@map("email_histories")
}

model EmailHistoryRecipient {
  id               String       @id @default(cuid())
  created_at       DateTime     @default(now())
  updated_at       DateTime     @default(now())
  deleted_at       DateTime?
  email_history_id String
  recipient_id     String
  email_history    EmailHistory @relation(fields: [email_history_id], references: [id], onDelete: Cascade)
  recipient        User         @relation(fields: [recipient_id], references: [id], onDelete: Cascade)

  @@map("email_history_recipients")
}

model EmailSettings {
  id           Int      @id @default(autoincrement())
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  smtpHost     String
  smtpPort     Int
  smtpUsername String
  smtpPassword String
  smtpFrom     String

  @@map("email_settings")
}

model PostPerformance {
  id              String    @id @default(cuid())
  created_at      DateTime  @default(now())
  updated_at      DateTime  @default(now())
  deleted_at      DateTime?
  post_id         String
  platform        String?
  likes           Int?
  comments        Int?
  shares          Int?
  reach           Int?
  impressions     Int?
  clicks          Int?
  engagement_rate Float?
  post            Post      @relation(fields: [post_id], references: [id], onDelete: Cascade)

  @@map("post_performances")
}

model Order {
  id              String        @id
  created_at      DateTime      @default(now())
  order_status    OrderStatus   @default(progress)
  subscription_id String?
  user_id         String?
  status          clintStatus   @default(active)
  service_tier_id String?
  ammount         Float?
  user_name       String?
  user_email      String?
  pakage_name     String?
  payment_status  paymentStatus @default(pending)
  service_tier    ServiceTier?  @relation(fields: [service_tier_id], references: [id])
  subscription    Subscription? @relation(fields: [subscription_id], references: [id])
  user            User?         @relation(fields: [user_id], references: [id])
  order_assigns   TaskAssign[]

  @@map("orders")
}

model TaskAssign {
  id          String     @id @default(cuid())
  created_at  DateTime   @default(now())
  user_id     String?
  reseller_id String?
  order_id    String?
  role_name   String?
  role_id     String?
  ammount     Float?
  note        String?
  user_name   String?
  due_date    String?
  status      Status     @default(In_progress)
  assigned_by String?    @default("Admin")
  posts       Post[]
  order       Order?     @relation(fields: [order_id], references: [id])
  role        Role?      @relation(fields: [role_id], references: [id])
  user        User?      @relation(fields: [user_id], references: [id])
  assignees   Reseller[] @relation("TaskAssaingees")

  @@map("task_assign")
}

model ResellerApplication {
  applicationId String            @id @default(cuid())
  created_at    DateTime          @default(now())
  user_id       String
  full_name     String?
  user_email    String?
  phone_number  Int?
  location      String?
  position      String?
  experience    Int?
  cover_letter  String?
  portfolio     String?
  skills        String[]
  status        applicationStatus
  resellers     resellers[]
  user          User              @relation(fields: [user_id], references: [id])

  @@map("reseller_application")
}

model Reseller {
  reseller_id      String             @id
  user_id          String?
  user_type        String?
  full_name        String?
  user_email       String?
  skills           String[]
  total_task       Int                @default(0)
  complete_tasks   Int                @default(0)
  total_earnings   Float              @default(0)
  status           ResellerStatus     @default(active)
  resellers        resellers[]
  user             User?              @relation(fields: [user_id], references: [id])
  ResellerPayments ResellerPayments[]
  TaskAssign       TaskAssign[]       @relation("TaskAssaingees")

  @@map("resellers")
}

model ResellerPayments {
  id           String              @id @default(cuid())
  reseller_id  String?
  status       ResellerPayemntStat
  task_ammount Float?
  reseller     Reseller?           @relation(fields: [reseller_id], references: [reseller_id])

  @@map("resellers_payment")
}

model DesignFile {
  id         String            @id @default(cuid())
  created_at DateTime          @default(now())
  updated_at DateTime          @default(now())
  deleted_at DateTime?
  content    String?
  status     Int?              @default(1)
  assets     DesignFileAsset[]
}

model DesignFileAsset {
  id             String      @id @default(cuid())
  created_at     DateTime    @default(now())
  updated_at     DateTime    @default(now())
  name           String
  type           String
  file_path      String
  size           Int?
  design_file_id String?
  design_file    DesignFile? @relation(fields: [design_file_id], references: [id])
}

model Team {
  id        String  @id
  full_name String?
  email     String? @unique
  role      String?
  password  String?
}

model AttachmentToMessage {
  A           String
  B           String
  attachments Attachment @relation(fields: [A], references: [id], onDelete: Cascade)
  Message     Message    @relation(fields: [B], references: [id], onDelete: Cascade)

  @@id([A, B], map: "_AttachmentToMessage_AB_pkey")
  @@index([B], map: "_AttachmentToMessage_B_index")
  @@map("_AttachmentToMessage")
}

model resellers {
  A                    String
  B                    String
  resellers            Reseller            @relation(fields: [A], references: [reseller_id], onDelete: Cascade)
  reseller_application ResellerApplication @relation(fields: [B], references: [applicationId], onDelete: Cascade)

  @@id([A, B], map: "_resellers_AB_pkey")
  @@index([B], map: "_resellers_B_index")
  @@map("_resellers")
}

enum MessageStatus {
  PENDING
  SENT
  DELIVERED
  READ
}

enum SubscriptionStatus {
  active
  canceled
  expired
  pending
  deactive
}

enum OrderStatus {
  progress
  completed
  pending
  canceled
}

enum clintStatus {
  active
  inactive
}

enum paymentStatus {
  paid
  pending
  due
}

enum Status {
  In_progress
  completed
  pending
  canceled
  Clint_review
  pending_review
}

enum applicationStatus {
  accepted
  pending
  rejected
}

enum ResellerStatus {
  active
  deactive
}

enum ResellerPayemntStat {
  pending
  paid
}
